{"version":3,"sources":["component/Form.js","App.js","serviceWorker.js","index.js"],"names":["form","state","population","timeToElapse","reportedCases","totalHospitalBeds","eventHandler","event","target","name","value","type","checked","setState","className","onSubmit","this","data-population","placeholder","onChange","data-time-to-elapse","data-reported-cases","data-total-hospital-beds","data-period-type","periodType","React","Component","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QA8GeA,E,2MA3GXC,MAAQ,CACJC,WAAY,GACZC,aAAc,GACdC,cAAe,GACfC,kBAAmB,I,EAGvBC,aAAe,SAACC,GAAW,IAAD,EACeA,EAAMC,OAApCC,EADe,EACfA,KAAMC,EADS,EACTA,MAAOC,EADE,EACFA,KAAMC,EADJ,EACIA,QACjB,aAATD,EACA,EAAKE,SAAL,eACKJ,EAAOG,IAEZ,EAAKC,SAAL,eACKJ,EAAOC,K,wEAIZ,OACI,6BACI,gCAAQ,0DACR,yBAAKI,UAAU,UACX,0BAAMC,SAAUC,KAAKV,cACjB,2BAAOQ,UAAU,mBACb,0BAAMA,UAAU,SAAhB,qBACA,2BACIG,mBAAA,EACAN,KAAK,OACLD,MAAOM,KAAKf,MAAMC,WAClBO,KAAK,aACLS,YAAY,YACZC,SAAUH,KAAKV,gBAEf,6BACR,2BAAOQ,UAAU,mBACb,0BAAMA,UAAU,SAAhB,kBACA,2BACIM,uBAAA,EACAT,KAAK,OACLD,MAAOM,KAAKf,MAAME,aAClBM,KAAK,eACLS,YAAY,KACZC,SAAUH,KAAKV,gBAEf,6BACR,2BAAOQ,UAAU,mBACb,0BAAMA,UAAU,SAAhB,kBACA,2BACIO,uBAAA,EACAV,KAAK,OACLD,MAAOM,KAAKf,MAAMG,cAClBK,KAAK,gBACLS,YAAY,QACZC,SAAUH,KAAKV,gBAEf,6BACR,2BAAOQ,UAAU,mBACb,0BAAMA,UAAU,SAAhB,uBACA,2BACIQ,4BAAA,EACAX,KAAK,OACLD,MAAOM,KAAKf,MAAMI,kBAClBI,KAAK,oBACLS,YAAY,SACZC,SAAUH,KAAKV,gBAEf,6BACR,2BAAOQ,UAAU,mBACb,0BAAMA,UAAU,SAAhB,eACA,2BACIS,oBAAA,EACAZ,KAAK,QACLF,KAAK,aACLC,MAAM,OACNE,QAAmC,SAA1BI,KAAKf,MAAMuB,WACpBL,SAAUH,KAAKV,eARvB,OAUI,6BACA,2BACIiB,oBAAA,EACAZ,KAAK,QACLF,KAAK,aACLC,MAAM,QACNE,QAAmC,UAA1BI,KAAKf,MAAMuB,WACpBL,SAAUH,KAAKV,eAjBvB,QAmBI,6BACA,2BACIiB,oBAAA,EACAZ,KAAK,QACLF,KAAK,aACLC,MAAM,SACNE,QAAmC,WAA1BI,KAAKf,MAAMuB,WACpBL,SAAUH,KAAKV,eA1BvB,UA4BQ,6BACR,yBAAKQ,UAAU,2BACX,6CAIZ,gCAAQ,6BAAM,yF,GAtGXW,IAAMC,WCWVC,MARf,WACI,OACI,6BACI,kBAACC,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8103a26.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nclass form extends React.Component {\r\n    state = {\r\n        population: \"\",\r\n        timeToElapse: \"\",\r\n        reportedCases: \"\",\r\n        totalHospitalBeds: \"\"\r\n    }\r\n\r\n    eventHandler = (event) => {\r\n        const {name, value, type, checked} = event.target\r\n        type === \"checkbox\" ?\r\n        this.setState({\r\n            [name]: checked\r\n        }) :\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header><p>novelty COVID-19 Estimator</p></header>\r\n                <div className=\"middle\">\r\n                    <form onSubmit={this.eventHandler}>\r\n                        <label className=\"steps-container\">\r\n                            <span className=\"label\">Region Population</span>\r\n                            <input\r\n                                data-population\r\n                                type=\"text\"\r\n                                value={this.state.population}\r\n                                name=\"population\"\r\n                                placeholder=\"900000000\"\r\n                                onChange={this.eventHandler}\r\n                            />\r\n                        </label><br/>\r\n                        <label className=\"steps-container\">\r\n                            <span className=\"label\">Time to Elapse</span>\r\n                            <input\r\n                                data-time-to-elapse\r\n                                type=\"text\"\r\n                                value={this.state.timeToElapse}\r\n                                name=\"timeToElapse\"\r\n                                placeholder=\"60\"\r\n                                onChange={this.eventHandler}\r\n                            />\r\n                        </label><br/>\r\n                        <label className=\"steps-container\">\r\n                            <span className=\"label\">Reported Cases</span>\r\n                            <input\r\n                                data-reported-cases\r\n                                type=\"text\"\r\n                                value={this.state.reportedCases}\r\n                                name=\"reportedCases\"\r\n                                placeholder=\"70000\"\r\n                                onChange={this.eventHandler}\r\n                            />\r\n                        </label><br/>\r\n                        <label className=\"steps-container\">\r\n                            <span className=\"label\">Total Hospital Beds</span>\r\n                            <input\r\n                                data-total-hospital-beds\r\n                                type=\"text\"\r\n                                value={this.state.totalHospitalBeds}\r\n                                name=\"totalHospitalBeds\"\r\n                                placeholder=\"700800\"\r\n                                onChange={this.eventHandler}\r\n                            />\r\n                        </label><br/>\r\n                        <label className=\"steps-container\">\r\n                            <span className=\"label\">Period Type</span>\r\n                            <input\r\n                                data-period-type\r\n                                type=\"radio\"\r\n                                name=\"periodType\"\r\n                                value=\"days\"\r\n                                checked={this.state.periodType === \"days\"}\r\n                                onChange={this.eventHandler}\r\n                            />Days\r\n                            <br/>\r\n                            <input\r\n                                data-period-type\r\n                                type=\"radio\"\r\n                                name=\"periodType\"\r\n                                value=\"weeks\"\r\n                                checked={this.state.periodType === \"weeks\"}\r\n                                onChange={this.eventHandler}\r\n                            />Weeks\r\n                            <br/>\r\n                            <input\r\n                                data-period-type\r\n                                type=\"radio\"\r\n                                name=\"periodType\"\r\n                                value=\"months\"\r\n                                checked={this.state.periodType === \"months\"}\r\n                                onChange={this.eventHandler}\r\n                            />Months\r\n                        </label><br/>\r\n                        <div className=\"flexbox steps-container\">\r\n                            <button>Submit</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <footer><hr /><span>COVID-19 Estimator assessment app for BuildForSDG</span></footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default form","import React from \"react\"\nimport \"./App.css\"\n\nimport Form from \"./component/Form\"\n\nfunction App() {\n    return(\n        <div>\n            <Form />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}